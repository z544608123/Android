使用SharedPreferences进行数据存储

1、介绍
   SharedPreferences是一个轻量级的存储类，适合用于保存软件配置参数。
   程序无法直接创建SharedPreferences实例，只能通过conext的getSharedPreferences(String, int)的获取接口实例。

2、语法结构
   getSharedPreferences(name , mode) 
   mode可以为：Context.MODE_PRIVATE、Context.MODE_WORLD_READABLE
   其中Context.MODE_PRIVATE:指定该SharedPreferences数据只能被本应用程序或者是拥有相同user ID的应用读、写。

3、如何向SharedPreferences中写入数据
   需要获取SharedPreferences的编辑对象即：SharedPreferences.Editor :  使用 edit()
   使用putXXX()方法，向preferences写入数据
    SharedPreferences sharedPreferences = getSharedPreferences("user", Context.MODE_PRIVATE);
    Editor editor = sharedPreferences.edit();//获取编辑器
    editor.putString("name", "zhang");
    editor.putInt("age", 22);
    editor.commit();//提交修改
    
 4、注意
   SharedPreferences最好不要用来保存多个程序交互使用的共享数据，
   最好使用ContentProvider, BroadcastReceiver, and Service 来完成多个程序之间的数据共享。
   
5、SharedPreference.Editor的apply和commit方法异同
   a. apply没有返回值而commit返回boolean表明修改是否提交成功 
   b. 当两个editor对象同时对一个共享的preferences参数进行操作时，永远都是最后一个调用commit方法/apply方法的editor变更了最后的数据值
   c. 提交操作是原子性的
   
   commit和apply虽然都是原子性操作，但是原子的操作不同，commit是原子提交到数据库，所以从提交数据到存在Disk中都是同步过程，中间不可打断。

而apply方法的原子操作是原子提交的内存中，而非数据库，所以在提交到内存中时不可打断，之后再异步提交数据到数据库中，因此也不会有相应的返回值。

所有commit提交是同步过程，效率会比apply异步提交的速度慢，但是apply没有返回值，永远无法知道存储是否失败。

在不关心提交结果是否成功的情况下，优先考虑apply方法。

